# Script d'entra√Ænement pour pr√©dire la qualit√© d'un vin
# Mod√®le : RandomForestRegressor
# Donn√©es : dataset_wine.csv (avec une colonne 'quality' comme cible)

import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Chargement des donn√©es
df = pd.read_csv("dataset_wine.csv", sep=",")

# S√©paration des variables explicatives (X) et de la cible (y)
# On supprime √©galement la colonne 'Id' qui n'a pas de valeur pr√©dictive
X = df.drop(columns=["quality", "Id"])
y = df["quality"]

# D√©coupage des donn√©es en jeu d'entra√Ænement et de test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Initialisation et entra√Ænement du mod√®le
# Param√®tres du mod√®le choisis pour un bon compromis performance/interpr√©tabilit√©
model = RandomForestRegressor(
    n_estimators=200,   # nombre d'arbres
    max_depth=10,       # profondeur maximale des arbres
    random_state=42     # pour reproductibilit√©
)
model.fit(X_train, y_train)

# √âvaluation du mod√®le sur le jeu de test
# M√©triques utilis√©es : RMSE et R¬≤
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("üîç √âvaluation du mod√®le :")
print(f" - RMSE : {mse**0.5:.2f}")
print(f" - R¬≤ : {r2:.2f}")
print(f" - Pr√©dictions : min={y_pred.min():.2f}, max={y_pred.max():.2f}, √©cart-type={y_pred.std():.2f}")

# √âtape 6 : Sauvegarde du mod√®le pour r√©utilisation dans Streamlit
joblib.dump(model, "model.joblib_test")
print("‚úÖ Mod√®le sauvegard√© dans 'model.joblib_test'")
